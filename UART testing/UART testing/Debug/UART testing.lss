
UART testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000000ee  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f7  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a3  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "uart.h"

int main(void)
{
    /* Replace with your application code */
	UART_init();
  82:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_init>
    while (1) 
    {
		UART_sendString("m1_18");
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 5f 00 	call	0xbe	; 0xbe <UART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e9       	ldi	r18, 0x9F	; 159
  90:	86 e8       	ldi	r24, 0x86	; 134
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x12>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1c>
  9e:	00 00       	nop
  a0:	f2 cf       	rjmp	.-28     	; 0x86 <main+0x4>

000000a2 <UART_init>:
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
}
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	8a b9       	out	0x0a, r24	; 10
  aa:	86 e8       	ldi	r24, 0x86	; 134
  ac:	80 bd       	out	0x20, r24	; 32
  ae:	10 bc       	out	0x20, r1	; 32
  b0:	8c e0       	ldi	r24, 0x0C	; 12
  b2:	89 b9       	out	0x09, r24	; 9
  b4:	08 95       	ret

000000b6 <UART_sendByte>:
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <UART_sendByte>
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	08 95       	ret

000000be <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	fc 01       	movw	r30, r24
	uint8 i = 0;
	while(Str[i] != '\0')
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	59 f0       	breq	.+22     	; 0xe2 <UART_sendString+0x24>
  cc:	8f 01       	movw	r16, r30
  ce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_sendByte(Str[i]);
  d0:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART_sendByte>
		i++;
  d4:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
  d6:	f8 01       	movw	r30, r16
  d8:	ec 0f       	add	r30, r28
  da:	f1 1d       	adc	r31, r1
  dc:	80 81       	ld	r24, Z
  de:	81 11       	cpse	r24, r1
  e0:	f7 cf       	rjmp	.-18     	; 0xd0 <UART_sendString+0x12>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	08 95       	ret

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
