
servoMove.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000734  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060d  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c2  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer1_Fast_PWM_Init>:
#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 1000000UL
void Timer1_Fast_PWM_Init(unsigned short duty_cycle)
{
	TCNT1 = 0;		/* Set timer1 initial count to zero */
  6c:	1d bc       	out	0x2d, r1	; 45
  6e:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
  70:	23 ec       	ldi	r18, 0xC3	; 195
  72:	39 e0       	ldi	r19, 0x09	; 9
  74:	37 bd       	out	0x27, r19	; 39
  76:	26 bd       	out	0x26, r18	; 38

	OCR1A = duty_cycle; /* Set the compare value */
  78:	9b bd       	out	0x2b, r25	; 43
  7a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = duty_cycle; /* Set the compare value */
  7c:	99 bd       	out	0x29, r25	; 41
  7e:	88 bd       	out	0x28, r24	; 40
	
	
	TCCR1A = (1<<WGM11) | (1<<COM1A1) ; /*PRESCALER=64 MODE 14(FAST PWM)*/
  80:	82 e8       	ldi	r24, 0x82	; 130
  82:	8f bd       	out	0x2f, r24	; 47
  84:	08 95       	ret

00000086 <main>:
	


int main(void)
{
	DDRD |= (1<<PD5);	
  86:	8d 9a       	sbi	0x11, 5	; 17
	
    while (1) 
    {
		Timer1_Fast_PWM_Init(97);	/* Set Servo shaft at 0° position by 0.388 ms pulse */
  88:	81 e6       	ldi	r24, 0x61	; 97
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <Timer1_Fast_PWM_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e7       	ldi	r18, 0x7F	; 127
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	9e e1       	ldi	r25, 0x1E	; 30
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x10>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x1a>
  a0:	00 00       	nop
		_delay_ms(10000);
		Timer1_Fast_PWM_Init(316);	/* Set Servo shaft at 90° position by 1.264 ms pulse */
  a2:	8c e3       	ldi	r24, 0x3C	; 60
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <Timer1_Fast_PWM_Init>
  aa:	2f e7       	ldi	r18, 0x7F	; 127
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	9e e1       	ldi	r25, 0x1E	; 30
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x2a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x34>
  ba:	00 00       	nop
		_delay_ms(10000);
		Timer1_Fast_PWM_Init(535);	/* Set Servo shaft at 180° position by 2.14 ms pulse */
  bc:	87 e1       	ldi	r24, 0x17	; 23
  be:	92 e0       	ldi	r25, 0x02	; 2
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <Timer1_Fast_PWM_Init>
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	9e e1       	ldi	r25, 0x1E	; 30
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x44>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x4e>
  d4:	00 00       	nop
  d6:	d8 cf       	rjmp	.-80     	; 0x88 <main+0x2>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
